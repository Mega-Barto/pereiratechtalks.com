name: Release and Publish

on:
  pull_request:
    branches:
      - main
    types:
      - closed

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:

  build_and_deploy:
    name: 'Build application bundle'
    runs-on: ubuntu-latest
    environment: live
    steps:
      - name: Step 1 - ‚öôÔ∏è Setup Actions
        uses: actions/checkout@v4
        with:
          fetch-depth: '30'
          token: ${{ secrets.AUTOMATION_GITHUB_TOKEN }}
      - name: Step 2 - ‚öôÔ∏è Setup GitHub Config
        run: |
          git config user.name "ü§ñ Pereira Tech Talks"
          git config user.email "pereiratechtalks@gmail.com"
      - uses: actions/setup-node@v4
        with:
          node-version: '20.16.0'
      - name: Step 3 - Verify the existence of 'ghpages' branch
        run: |
          git fetch origin
          git checkout -b ghpages
          git pull origin ghpages --rebase || true
      - name: Step 4 - Remove previous build
        run: |
          rm -rf docs
      - name: Step 5 - üìÅ Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: Step 6 - ‚öôÔ∏è Install Dependencies
        run: npm install
      - name: Step 7 - Build static files
        run: |
          npm run build:ghpages
          if [ ! -d "docs" ]; then
            echo "‚ö†Ô∏è Error: docs folder does not exist."
            exit 1
          fi
      - name: Step 8 - Commit build changes
        run: |
          git add .
          git commit -m "Build: Update static files for GitHub Pages" || echo "No changes to commit"
      - name: Step 9 - Push changes to ghpages
        run: |
          git push origin ghpages
        env:
          GITHUB_TOKEN: ${{ secrets.AUTOMATION_GITHUB_TOKEN }}
      - name: Step 10 - Checkout 'main' branch
        run: |
          git checkout main

  release_and_publish:
    needs: build_and_deploy
    name: 'Release and Publish'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '30'
          token: ${{ secrets.AUTOMATION_GITHUB_TOKEN }}
      - uses: actions/setup-node@v4
        with:
          node-version: '20.16.0'
          registry-url: https://registry.npmjs.org/
      - name: Step 0 - üìÅ Cache node modules
        uses: actions/cache@v4
        id: cache-npm
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            node_modules
            dist
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Step 1 - üìÅ Cache build dist
        uses: actions/cache@v4
        env:
          cache-name: cache-build-dist
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Step 2 - ‚öôÔ∏è Setup GitHub Config
        run: |
          git config user.name "ü§ñ Pereira Tech Talks"
          git config user.email "pereiratechtalks@gmail.com"
      - name: Step 3 - üìÑ Set GitHub release content "BODY" env var
        run: |
          bash .github/scripts/get_github_release_log.sh
          if [[ ! -f git_logs_output.txt ]]; then
            echo "‚ö†Ô∏è No description found for release body content."
            exit 1
          fi
      - name: Step 4 -üîÑ Prepare release
        run: |
          npm run release
          git push --follow-tags origin main
      - name: Step 5 - üè∑Ô∏è Set GitHub release "TAG" env vars
        run: |
          GITHUB_RELEASE_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          if [[ -z $GITHUB_RELEASE_TAG ]]; then
            echo "‚ö†Ô∏è No release tag found."
            exit 1
          fi
          echo "::set-env name=GITHUB_RELEASE_TAG::$GITHUB_RELEASE_TAG"
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      - name: Step 6 - üöÄ Publish GitHub release
        uses: ncipollo/release-action@v1
        with:
          name: Release ${{ env.GITHUB_RELEASE_TAG }}
          tag: ${{ env.GITHUB_RELEASE_TAG }}
          bodyFile: git_logs_output.txt
          token: ${{ secrets.AUTOMATION_GITHUB_TOKEN }}
      # - name: Step 7 - üóëÔ∏è Deleting source branch
      #   run: |
      #     PR_MERGED=$(jq --raw-output .pull_request.merged "$GITHUB_EVENT_PATH")
      #     if [ "$PR_MERGED" = "true" ]; then
      #       git push origin --delete "${{ github.event.pull_request.head.ref }}"
      #     fi

    outputs:
      package_version: ${{ steps.publish_npm_package.outputs.package_version }}

  cleanup_caches:
    needs: release_and_publish
    name: 'Cleanup caches'
    runs-on: ubuntu-latest
    steps:
      - name: Step 1 - üóëÔ∏è Trigger cleanup caches workflow
        run: |
          curl --location "https://api.github.com/repos/$GITHUB_REPOSITORY/dispatches" \
            --header "Authorization: token ${{ secrets.AUTOMATION_GITHUB_TOKEN }}" \
            --header "Content-Type: application/json" \
            --data '{
                "event_type": "cleanup_caches",
                "client_payload": {}
            }'

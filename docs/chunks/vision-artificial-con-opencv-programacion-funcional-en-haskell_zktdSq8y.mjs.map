{"version":3,"file":"vision-artificial-con-opencv-programacion-funcional-en-haskell_zktdSq8y.mjs","sources":["../../src/content/post/vision-artificial-con-opencv-programacion-funcional-en-haskell.mdx"],"sourcesContent":["---\npublishDate: 2017-10-19T00:00:00Z\nauthor: Sergio Alexander\ntitle: Visión artificial con OpenCV && Programación funcional en Haskell\nexcerpt: Visión artificial con OpenCV && Programación funcional en Haskell\nimage: ~/assets/images/posts/banners/opencv.jpg\ncategory: Javascript\ntags:\n  - Javascript\n  - PereiraJs\n  - Haskell\n  - OpenCV\n\nmetadata:\n  canonical: https://pereiratechtalks.com/vision-artificial-con-opencv-programacion-funcional-en-haskell/\n---\n\nEn Pereira Tech Talks tuvimos un éxitoso segundo Meetup con dos charlas muy interesantes sobre:\n\n**\"Image Stitching\", una introducción a OpenCV by [Carlos Álvaro](http://caal-15.github.io/#programming)**\n\nAprenderás cómo con [OpenCV](https://opencv.org/) 3 usando python se puede detectar y unir dos Imágenes al estilo panorama, mediante la detección de características, y encontrando correspondencias entre ambas.\n\nOpenCV es una biblioteca libre y multiplataforma, que abarca una gran gama de áreas en el proceso de visión artificial por computadora, como reconocimiento de objetos, reconocimiento facial, calibración de cámaras, visión estérea y visión robótica.\n\nSlides disponibles en: https://caal-15.github.io/image-stitching-talk/#1\n\n![opencv-1](~/assets/images/posts/content/opencv-1.jpg)\n\n**El mundo de Haskell y la programación funcional by [Alejandro Suarez](https://twitter.com/alsug4)**\n\nEn esta charla conocerás sobre [Haskell](https://www.haskell.org/), un lenguaje puramente funcional que si bien no está de moda, ni abunda en el mercado, aprenderlo puede ser muy interesante para mejorar y obtener una mejor visión como programador.\n\nPor otro lado para quienes apenas se sumergen en el mundo de la programación, Haskell puede ser un buen comienzo y su aprendizaje será mucho más suave y digerible para ellos, ya que no han adquirido \"las malas costumbres y pensamientos impuros\" de los lenguajes imperativos.\n\nLos programas en Haskell suelen ser más cortos que sus equivalentes imperativos, son más elegantes y concisos, lo que disminuye los errores y son más fáciles de mantener.\n\nSlides disponibles en: http://slides.com/xergioalex/tensorflow#/\n\n![opencv-2](~/assets/images/posts/content/opencv-2.jpg)\n\n**Más memorias del Meetup:**\n\n![opencv-3](~/assets/images/posts/content/opencv-3.jpg)\n\n![opencv-4](~/assets/images/posts/content/opencv-4.jpg)\n\n![opencv-5](~/assets/images/posts/content/opencv-5.png)\n\n![opencv-6](~/assets/images/posts/content/opencv-6.jpg)"],"names":["_jsx"],"mappings":"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"}
{"version":3,"file":"250815878-noche-de-testing-pru_BPK8w9i7.mjs","sources":["../../src/content/post/250815878-noche-de-testing-pru.mdx"],"sourcesContent":["---\npublishDate: 2018-05-24T23:30:00.000Z\nauthor: Meetup.com\ntitle: 'Noche de testing - Pruebas Unitarias en Python y Javascript'\nimage: '~/assets/images/posts/banners/highres_471151247.jpeg'\nvenue: 'Edificio CIDT - Salón 15C-102'\ncategory: Eventos\ntags:\n  - Meetup.com\nmetadata:\n  canonical: https://pereiratechtalks.com/250815878-noche-de-testing-pru\n---\n\n> Publicación original en [Meetup.com](https://www.meetup.com/pereira-tech-talks/events/250815878/)\n\n<p>Las pruebas unitarias están hechas para realizar un trabajo de desarrollo confiable, ágil y eficiente. Es por esto, que esta práctica de incluir pruebas unitarias durante el desarrollo, son adoptadas para incrementar la confiabilidad del código escrito, y poder realizar despliegues a producción de las aplicaciones de forma constantes y de manera segura.</p> <p>En nuestro próximo Meetup, tendremos dos conferencias donde hablaremos de manera introductoria sobre el mundo de pruebas unitarias, enfocadas a dos lenguajes completamente distintos, que están siendo utilizados actualmente para desarrollar aplicaciones web. El primero javascript del lado del cliente y por otra parte, python en el servidor.</p> <p>1. Pruebas unitarias en Javascript by John Darwin Morales (<a href=\"https://twitter.com/jdmorales092\" class=\"linkified\">https://twitter.com/jdmorales092</a>)</p> <p>En Javascript, actualmente existen distintos frameworks para realizar este tipo de pruebas en el código, como jasmine, que es un framework que nos provee la forma de diseñar pruebas que corren de forma automática. También cabe destacar que existe un set de herramientas que podrían acompañan a este framework, las cuales brindan funcionalidades que potencializan su uso. En esta conferencia hablaremos de jasmine y su conjunto de herramientas, saber de qué se tratan y cómo la podemos usar para nuestras aplicaciones del lado del cliente.</p> <p>2. Pruebas unitarias en Python by Carlos Álvaro (<a href=\"http://caal-15.github.io/#programming\" class=\"linkified\">http://caal-15.github.io/#programming</a>)</p> <p>Python, en contraste, cuenta con un un módulo estándar para realizar pruebas unitarias, llamado unittest, con este módulo podemos realizar casi cualquier tipo de prueba o las tareas relacionadas a las mismas, incluyendo Mocks, en esta charla hablaremos del conjunto de herramientas estándar a nuestra disposición para testing y cómo usarlas correctamente.</p> <p>---</p> <p>Al final tendremos un espacio de networking para charlar y compartir acompañados de unos deliciosos snacks patrocinados por nuestro sponsor Rocka (<a href=\"http://rocka.co/\" class=\"linkified\">http://rocka.co/</a>).</p> <p>P.D. Si estas interesado en participar como ponente, apoyar o patrocinar nuestras charlas, contáctanos por este medio o escríbenos a nuestro buzón en [masked].</p> \n"],"names":["_jsx"],"mappings":"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"}
{"version":3,"file":"_astro_assets_gcCOX48q.mjs","sources":["../../node_modules/astro/dist/assets/types.js","../../node_modules/astro/dist/assets/utils/remoteProbe.js","../../node_modules/astro/dist/assets/internal.js","../../node_modules/astro/components/Image.astro","../../node_modules/astro/components/Picture.astro"],"sourcesContent":["const isESMImport = Symbol(\"#isESM\");\nfunction isImageMetadata(src) {\n  return src.fsPath && !(\"fsPath\" in src);\n}\nexport {\n  isImageMetadata\n};\n","import { AstroError, AstroErrorData } from \"../../core/errors/index.js\";\nimport { imageMetadata } from \"./metadata.js\";\nasync function inferRemoteSize(url) {\n  const response = await fetch(url);\n  if (!response.body || !response.ok) {\n    throw new AstroError({\n      ...AstroErrorData.FailedToFetchRemoteImageDimensions,\n      message: AstroErrorData.FailedToFetchRemoteImageDimensions.message(url)\n    });\n  }\n  const reader = response.body.getReader();\n  let done, value;\n  let accumulatedChunks = new Uint8Array();\n  while (!done) {\n    const readResult = await reader.read();\n    done = readResult.done;\n    if (done) break;\n    if (readResult.value) {\n      value = readResult.value;\n      let tmp = new Uint8Array(accumulatedChunks.length + value.length);\n      tmp.set(accumulatedChunks, 0);\n      tmp.set(value, accumulatedChunks.length);\n      accumulatedChunks = tmp;\n      try {\n        const dimensions = await imageMetadata(accumulatedChunks, url);\n        if (dimensions) {\n          await reader.cancel();\n          return dimensions;\n        }\n      } catch {\n      }\n    }\n  }\n  throw new AstroError({\n    ...AstroErrorData.NoImageMetadata,\n    message: AstroErrorData.NoImageMetadata.message(url)\n  });\n}\nexport {\n  inferRemoteSize\n};\n","import { AstroError, AstroErrorData } from \"../core/errors/index.js\";\nimport { DEFAULT_HASH_PROPS } from \"./consts.js\";\nimport { isLocalService } from \"./services/service.js\";\nimport {\n  isImageMetadata\n} from \"./types.js\";\nimport { isESMImportedImage, isRemoteImage, resolveSrc } from \"./utils/imageKind.js\";\nimport { inferRemoteSize } from \"./utils/remoteProbe.js\";\nasync function getConfiguredImageService() {\n  if (!globalThis?.astroAsset?.imageService) {\n    const { default: service } = await import(\n      // @ts-expect-error\n      \"virtual:image-service\"\n    ).catch((e) => {\n      const error = new AstroError(AstroErrorData.InvalidImageService);\n      error.cause = e;\n      throw error;\n    });\n    if (!globalThis.astroAsset) globalThis.astroAsset = {};\n    globalThis.astroAsset.imageService = service;\n    return service;\n  }\n  return globalThis.astroAsset.imageService;\n}\nasync function getImage(options, imageConfig) {\n  if (!options || typeof options !== \"object\") {\n    throw new AstroError({\n      ...AstroErrorData.ExpectedImageOptions,\n      message: AstroErrorData.ExpectedImageOptions.message(JSON.stringify(options))\n    });\n  }\n  if (typeof options.src === \"undefined\") {\n    throw new AstroError({\n      ...AstroErrorData.ExpectedImage,\n      message: AstroErrorData.ExpectedImage.message(\n        options.src,\n        \"undefined\",\n        JSON.stringify(options)\n      )\n    });\n  }\n  if (isImageMetadata(options)) {\n    throw new AstroError(AstroErrorData.ExpectedNotESMImage);\n  }\n  const service = await getConfiguredImageService();\n  const resolvedOptions = {\n    ...options,\n    src: await resolveSrc(options.src)\n  };\n  if (options.inferSize && isRemoteImage(resolvedOptions.src)) {\n    const result = await inferRemoteSize(resolvedOptions.src);\n    resolvedOptions.width ??= result.width;\n    resolvedOptions.height ??= result.height;\n    delete resolvedOptions.inferSize;\n  }\n  const originalFilePath = isESMImportedImage(resolvedOptions.src) ? resolvedOptions.src.fsPath : void 0;\n  const clonedSrc = isESMImportedImage(resolvedOptions.src) ? (\n    // @ts-expect-error - clone is a private, hidden prop\n    resolvedOptions.src.clone ?? resolvedOptions.src\n  ) : resolvedOptions.src;\n  resolvedOptions.src = clonedSrc;\n  const validatedOptions = service.validateOptions ? await service.validateOptions(resolvedOptions, imageConfig) : resolvedOptions;\n  const srcSetTransforms = service.getSrcSet ? await service.getSrcSet(validatedOptions, imageConfig) : [];\n  let imageURL = await service.getURL(validatedOptions, imageConfig);\n  let srcSets = await Promise.all(\n    srcSetTransforms.map(async (srcSet) => ({\n      transform: srcSet.transform,\n      url: await service.getURL(srcSet.transform, imageConfig),\n      descriptor: srcSet.descriptor,\n      attributes: srcSet.attributes\n    }))\n  );\n  if (isLocalService(service) && globalThis.astroAsset.addStaticImage && !(isRemoteImage(validatedOptions.src) && imageURL === validatedOptions.src)) {\n    const propsToHash = service.propertiesToHash ?? DEFAULT_HASH_PROPS;\n    imageURL = globalThis.astroAsset.addStaticImage(\n      validatedOptions,\n      propsToHash,\n      originalFilePath\n    );\n    srcSets = srcSetTransforms.map((srcSet) => ({\n      transform: srcSet.transform,\n      url: globalThis.astroAsset.addStaticImage(srcSet.transform, propsToHash, originalFilePath),\n      descriptor: srcSet.descriptor,\n      attributes: srcSet.attributes\n    }));\n  }\n  return {\n    rawOptions: resolvedOptions,\n    options: validatedOptions,\n    src: imageURL,\n    srcSet: {\n      values: srcSets,\n      attribute: srcSets.map((srcSet) => `${srcSet.url} ${srcSet.descriptor}`).join(\", \")\n    },\n    attributes: service.getHTMLAttributes !== void 0 ? await service.getHTMLAttributes(validatedOptions, imageConfig) : {}\n  };\n}\nexport {\n  getConfiguredImageService,\n  getImage\n};\n","---\nimport { type LocalImageProps, type RemoteImageProps, getImage } from 'astro:assets';\nimport { AstroError, AstroErrorData } from '../dist/core/errors/index.js';\nimport type { HTMLAttributes } from '../types';\n\n// The TypeScript diagnostic for JSX props uses the last member of the union to suggest props, so it would be better for\n// LocalImageProps to be last. Unfortunately, when we do this the error messages that remote images get are complete nonsense\n// Not 100% sure how to fix this, seems to be a TypeScript issue. Unfortunate.\ntype Props = LocalImageProps | RemoteImageProps;\n\nconst props = Astro.props;\n\nif (props.alt === undefined || props.alt === null) {\n\tthrow new AstroError(AstroErrorData.ImageMissingAlt);\n}\n\n// As a convenience, allow width and height to be string with a number in them, to match HTML's native `img`.\nif (typeof props.width === 'string') {\n\tprops.width = parseInt(props.width);\n}\n\nif (typeof props.height === 'string') {\n\tprops.height = parseInt(props.height);\n}\n\nconst image = await getImage(props);\n\nconst additionalAttributes: HTMLAttributes<'img'> = {};\nif (image.srcSet.values.length > 0) {\n\tadditionalAttributes.srcset = image.srcSet.attribute;\n}\n\nif (import.meta.env.DEV) {\n\tadditionalAttributes['data-image-component'] = 'true';\n}\n---\n\n<img src={image.src} {...additionalAttributes} {...image.attributes} />\n","---\nimport { type LocalImageProps, type RemoteImageProps, getImage } from 'astro:assets';\nimport * as mime from 'mrmime';\nimport type { GetImageResult, ImageOutputFormat } from '../dist/@types/astro';\nimport { isESMImportedImage, resolveSrc } from '../dist/assets/utils/imageKind';\nimport { AstroError, AstroErrorData } from '../dist/core/errors/index.js';\nimport type { HTMLAttributes } from '../types';\n\ntype Props = (LocalImageProps | RemoteImageProps) & {\n\tformats?: ImageOutputFormat[];\n\tfallbackFormat?: ImageOutputFormat;\n\tpictureAttributes?: HTMLAttributes<'picture'>;\n};\n\nconst defaultFormats = ['webp'] as const;\nconst defaultFallbackFormat = 'png' as const;\n\n// Certain formats don't want PNG fallbacks:\n// - GIF will typically want to stay as a gif, either for animation or for the lower amount of colors\n// - SVGs can't be converted to raster formats in most cases\n// - JPEGs compress photographs and high-noise images better than PNG in most cases\n// For those, we'll use the original format as the fallback instead.\nconst specialFormatsFallback = ['gif', 'svg', 'jpg', 'jpeg'] as const;\n\nconst { formats = defaultFormats, pictureAttributes = {}, fallbackFormat, ...props } = Astro.props;\n\nif (props.alt === undefined || props.alt === null) {\n\tthrow new AstroError(AstroErrorData.ImageMissingAlt);\n}\n\n// Picture attribute inherit scoped styles from class and attributes\nconst scopedStyleClass = props.class?.match(/\\bastro-\\w{8}\\b/)?.[0];\nif (scopedStyleClass) {\n\tif (pictureAttributes.class) {\n\t\tpictureAttributes.class = `${pictureAttributes.class} ${scopedStyleClass}`;\n\t} else {\n\t\tpictureAttributes.class = scopedStyleClass;\n\t}\n}\nfor (const key in props) {\n\tif (key.startsWith('data-astro-cid')) {\n\t\tpictureAttributes[key] = props[key];\n\t}\n}\n\nconst originalSrc = await resolveSrc(props.src);\nconst optimizedImages: GetImageResult[] = await Promise.all(\n\tformats.map(\n\t\tasync (format) =>\n\t\t\tawait getImage({\n\t\t\t\t...props,\n\t\t\t\tsrc: originalSrc,\n\t\t\t\tformat: format,\n\t\t\t\twidths: props.widths,\n\t\t\t\tdensities: props.densities,\n\t\t\t}),\n\t),\n);\n\nlet resultFallbackFormat = fallbackFormat ?? defaultFallbackFormat;\nif (\n\t!fallbackFormat &&\n\tisESMImportedImage(originalSrc) &&\n\t(specialFormatsFallback as ReadonlyArray<string>).includes(originalSrc.format)\n) {\n\tresultFallbackFormat = originalSrc.format;\n}\n\nconst fallbackImage = await getImage({\n\t...props,\n\tformat: resultFallbackFormat,\n\twidths: props.widths,\n\tdensities: props.densities,\n});\n\nconst imgAdditionalAttributes: HTMLAttributes<'img'> = {};\nconst sourceAdditionalAttributes: HTMLAttributes<'source'> = {};\n\n// Propagate the `sizes` attribute to the `source` elements\nif (props.sizes) {\n\tsourceAdditionalAttributes.sizes = props.sizes;\n}\n\nif (fallbackImage.srcSet.values.length > 0) {\n\timgAdditionalAttributes.srcset = fallbackImage.srcSet.attribute;\n}\n\nif (import.meta.env.DEV) {\n\timgAdditionalAttributes['data-image-component'] = 'true';\n}\n---\n\n<picture {...pictureAttributes}>\n\t{\n\t\tObject.entries(optimizedImages).map(([_, image]) => {\n\t\t\tconst srcsetAttribute =\n\t\t\t\tprops.densities || (!props.densities && !props.widths)\n\t\t\t\t\t? `${image.src}${image.srcSet.values.length > 0 ? ', ' + image.srcSet.attribute : ''}`\n\t\t\t\t\t: image.srcSet.attribute;\n\t\t\treturn (\n\t\t\t\t<source\n\t\t\t\t\tsrcset={srcsetAttribute}\n\t\t\t\t\ttype={mime.lookup(image.options.format ?? image.src) ?? `image/${image.options.format}`}\n\t\t\t\t\t{...sourceAdditionalAttributes}\n\t\t\t\t/>\n\t\t\t);\n\t\t})\n\t}\n\t<img src={fallbackImage.src} {...imgAdditionalAttributes} {...fallbackImage.attributes} />\n</picture>\n"],"names":["AstroErrorData.FailedToFetchRemoteImageDimensions","AstroErrorData.NoImageMetadata","AstroErrorData.InvalidImageService","getImage","AstroErrorData.ExpectedImageOptions","AstroErrorData.ExpectedImage","AstroErrorData.ExpectedNotESMImage","$$Astro","$$createAstro","$$createComponent","Astro","AstroErrorData.ImageMissingAlt","$$render","$$maybeRenderHead","$$addAttribute","$$spreadAttributes"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}
{"version":3,"file":"permalinks_BrJNZDpq.mjs","sources":["../../src/utils/utils.ts","../../src/utils/permalinks.ts"],"sourcesContent":["import { I18N } from 'astrowind:config';\n\nexport const formatter: Intl.DateTimeFormat = new Intl.DateTimeFormat(I18N?.language, {\n  year: 'numeric',\n  month: 'short',\n  day: 'numeric',\n  timeZone: 'UTC',\n});\n\nexport const getFormattedDate = (date: Date): string => (date ? formatter.format(date) : '');\n\nexport const trim = (str = '', ch?: string) => {\n  let start = 0,\n    end = str.length || 0;\n  while (start < end && str[start] === ch) ++start;\n  while (end > start && str[end - 1] === ch) --end;\n  return start > 0 || end < str.length ? str.substring(start, end) : str;\n};\n\n// Function to format a number in thousands (K) or millions (M) format depending on its value\nexport const toUiAmount = (amount: number) => {\n  if (!amount) return 0;\n\n  let value: string;\n\n  if (amount >= 1000000000) {\n    const formattedNumber = (amount / 1000000000).toFixed(1);\n    if (Number(formattedNumber) === parseInt(formattedNumber)) {\n      value = parseInt(formattedNumber) + 'B';\n    } else {\n      value = formattedNumber + 'B';\n    }\n  } else if (amount >= 1000000) {\n    const formattedNumber = (amount / 1000000).toFixed(1);\n    if (Number(formattedNumber) === parseInt(formattedNumber)) {\n      value = parseInt(formattedNumber) + 'M';\n    } else {\n      value = formattedNumber + 'M';\n    }\n  } else if (amount >= 1000) {\n    const formattedNumber = (amount / 1000).toFixed(1);\n    if (Number(formattedNumber) === parseInt(formattedNumber)) {\n      value = parseInt(formattedNumber) + 'K';\n    } else {\n      value = formattedNumber + 'K';\n    }\n  } else {\n    value = Number(amount).toFixed(0);\n  }\n\n  return value;\n};\n","import slugify from 'limax';\n\nimport { SITE, APP_BLOG } from 'astrowind:config';\n\nimport { trim } from '~/utils/utils';\n\nexport const trimSlash = (s: string) => trim(trim(s, '/'));\nconst createPath = (...params: string[]) => {\n  const paths = params\n    .map((el) => trimSlash(el))\n    .filter((el) => !!el)\n    .join('/');\n  return '/' + paths + (SITE.trailingSlash && paths ? '/' : '');\n};\n\nconst BASE_PATHNAME = SITE.base || '/';\n\nexport const cleanSlug = (text = '') =>\n  trimSlash(text)\n    .split('/')\n    .map((slug) => slugify(slug))\n    .join('/');\n\nexport const BLOG_BASE = cleanSlug(APP_BLOG?.list?.pathname);\nexport const CATEGORY_BASE = cleanSlug(APP_BLOG?.category?.pathname);\nexport const TAG_BASE = cleanSlug(APP_BLOG?.tag?.pathname) || 'tag';\n\nexport const POST_PERMALINK_PATTERN = trimSlash(APP_BLOG?.post?.permalink || `${BLOG_BASE}/%slug%`);\n\n/** */\nexport const getCanonical = (path = ''): string | URL => {\n  const url = String(new URL(path, SITE.site));\n  if (SITE.trailingSlash == false && path && url.endsWith('/')) {\n    return url.slice(0, -1);\n  } else if (SITE.trailingSlash == true && path && !url.endsWith('/')) {\n    return url + '/';\n  }\n  return url;\n};\n\n/** */\nexport const getPermalink = (slug = '', type = 'page'): string => {\n  let permalink: string;\n\n  switch (type) {\n    case 'category':\n      permalink = createPath(CATEGORY_BASE, trimSlash(slug));\n      break;\n\n    case 'tag':\n      permalink = createPath(TAG_BASE, trimSlash(slug));\n      break;\n\n    case 'post':\n      permalink = createPath(trimSlash(slug));\n      break;\n\n    case 'page':\n    default:\n      permalink = createPath(slug);\n      break;\n  }\n\n  return definitivePermalink(permalink);\n};\n\n/** */\nexport const getHomePermalink = (): string => getPermalink('/');\n\n/** */\nexport const getBlogPermalink = (): string => getPermalink(BLOG_BASE);\n\n/** */\nexport const getAsset = (path: string): string =>\n  '/' +\n  [BASE_PATHNAME, path]\n    .map((el) => trimSlash(el))\n    .filter((el) => !!el)\n    .join('/');\n\n/** */\nconst definitivePermalink = (permalink: string): string => createPath(BASE_PATHNAME, permalink);\n"],"names":[],"mappings":"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"}